generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                   String               @id @default(cuid())
  name                 String?
  email                String               @unique
  emailVerified        DateTime?
  image                String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  accounts             Account[]
  chatSessions         ChatSession[]
  onboardingPlans      OnboardingPlan[]
  orgPositions         OrgPosition[]
  projectMemberships   ProjectMember[]
  projectWatchers      ProjectWatcher[] @relation("ProjectWatcher")
  projectAssignees     ProjectAssignee[] @relation("ProjectAssignee")
  ownedProjects        Project[]        @relation("ProjectOwner")
  createdProjects      Project[]
  sessions             Session[]
  assignedSubtasks     Subtask[]
  taskComments         TaskComment[]
  assignedTasks        Task[]               @relation("TaskAssignee")
  createdTasks         Task[]               @relation("TaskCreator")
  wikiComments         WikiComment[]
  wikiPagePermissions  WikiPagePermission[]
  wikiPages            WikiPage[]
  wikiVersions         WikiVersion[]
  workflowAssignments  WorkflowAssignment[]
  workflowInstances    WorkflowInstance[]
  workspaceMemberships WorkspaceMember[]
  createdWorkspaces    Workspace[]
  onboardingTasks      OnboardingTask[]     @relation("OnboardingTaskToUser")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Workspace {
  id                  String               @id @default(cuid())
  name                String
  slug                String               @unique
  description         String?
  logo                String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  ownerId             String
  chatSessions        ChatSession[]
  integrations        Integration[]
  migrations          Migration[]
  onboardingPlans     OnboardingPlan[]
  onboardingTemplates OnboardingTemplate[]
  orgPositions        OrgPosition[]
  projects            Project[]
  tasks               Task[]
  wikiChunks          WikiChunk[]
  wikiPages           WikiPage[]
  workflowInstances   WorkflowInstance[]
  workflows           Workflow[]
  members             WorkspaceMember[]
  owner               User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("workspaces")
}

model WorkspaceMember {
  id          String        @id @default(cuid())
  workspaceId String
  userId      String
  role        WorkspaceRole @default(MEMBER)
  joinedAt    DateTime      @default(now())
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@map("workspace_members")
}

model WikiPage {
  id              String               @id @default(cuid())
  workspaceId     String
  title           String
  slug            String
  content         String
  excerpt         String?
  parentId        String?
  order           Int                  @default(0)
  isPublished     Boolean              @default(true)
  tags            String[]
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  createdById     String
  permissionLevel String               @default("team")
  category        String               @default("general")
  attachments     WikiAttachment[]
  chunks          WikiChunk[]
  comments        WikiComment[]
  permissions     WikiPagePermission[]
  embeds          WikiEmbed[]
  createdBy       User                 @relation(fields: [createdById], references: [id], onDelete: Cascade)
  parent          WikiPage?            @relation("WikiPageHierarchy", fields: [parentId], references: [id])
  children        WikiPage[]           @relation("WikiPageHierarchy")
  workspace       Workspace            @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  versions        WikiVersion[]
  projects        Project[]            // Projects that link to this wiki page

  @@unique([workspaceId, slug])
  @@map("wiki_pages")
}

model WikiAttachment {
  id        String   @id @default(cuid())
  pageId    String
  fileName  String
  fileSize  Int
  fileType  String
  fileUrl   String
  createdAt DateTime @default(now())
  page      WikiPage @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("wiki_attachments")
}

model WikiComment {
  id        String   @id @default(cuid())
  pageId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  page      WikiPage @relation(fields: [pageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wiki_comments")
}

model WikiVersion {
  id          String   @id @default(cuid())
  pageId      String
  content     String
  version     Int
  createdAt   DateTime @default(now())
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  page        WikiPage @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("wiki_versions")
}

model WikiChunk {
  id          String    @id @default(cuid())
  pageId      String
  workspaceId String
  content     String
  metadata    Json?
  createdAt   DateTime  @default(now())
  page        WikiPage  @relation(fields: [pageId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("wiki_chunks")
}

model WikiPagePermission {
  id         String         @id @default(cuid())
  pageId     String
  userId     String?
  role       WorkspaceRole?
  permission String
  granted    Boolean        @default(true)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  page       WikiPage       @relation(fields: [pageId], references: [id], onDelete: Cascade)
  user       User?          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pageId, userId, permission])
  @@map("wiki_page_permissions")
}

model WikiEmbed {
  id          String   @id @default(cuid())
  pageId      String
  provider    String   // figma, github, airtable, etc.
  url         String?
  resourceId  String?  // Provider-specific resource ID
  title       String?
  description String?
  thumbnail   String?
  metadata    Json?    // Provider-specific metadata
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  page        WikiPage @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("wiki_embeds")
}

model OnboardingTemplate {
  id          String           @id @default(cuid())
  workspaceId String
  name        String
  description String?
  role        String?
  duration    Int
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  plans       OnboardingPlan[]
  tasks       OnboardingTask[]
  workspace   Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("onboarding_templates")
}

model OnboardingTask {
  id               String                     @id @default(cuid())
  templateId       String
  title            String
  description      String?
  order            Int
  isRequired       Boolean                    @default(true)
  estimatedMinutes Int?
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt
  assignments      OnboardingTaskAssignment[]
  template         OnboardingTemplate         @relation(fields: [templateId], references: [id], onDelete: Cascade)
  users            User[]                     @relation("OnboardingTaskToUser")

  @@map("onboarding_tasks")
}

model OnboardingPlan {
  id          String                     @id @default(cuid())
  workspaceId String
  templateId  String?
  userId      String
  title       String
  status      OnboardingStatus           @default(ACTIVE)
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt
  template    OnboardingTemplate?        @relation(fields: [templateId], references: [id])
  user        User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace                  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks       OnboardingTaskAssignment[]

  @@map("onboarding_plans")
}

model OnboardingTaskAssignment {
  id          String         @id @default(cuid())
  planId      String
  taskId      String
  status      TaskStatus     @default(PENDING)
  completedAt DateTime?
  notes       String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  plan        OnboardingPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  task        OnboardingTask @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([planId, taskId])
  @@map("onboarding_task_assignments")
}

model OrgPosition {
  id          String        @id @default(cuid())
  workspaceId String
  userId      String?
  title       String
  department  String?
  level       Int           @default(1)
  parentId    String?
  order       Int           @default(0)
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  parent      OrgPosition?  @relation("OrgHierarchy", fields: [parentId], references: [id])
  children    OrgPosition[] @relation("OrgHierarchy")
  user        User?         @relation(fields: [userId], references: [id])
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("org_positions")
}

model Workflow {
  id          String             @id @default(cuid())
  workspaceId String
  name        String
  description String?
  definition  Json
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  instances   WorkflowInstance[]
  workspace   Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("workflows")
}

model WorkflowInstance {
  id          String               @id @default(cuid())
  workflowId  String
  workspaceId String
  userId      String
  status      WorkflowStatus       @default(PENDING)
  data        Json?
  startedAt   DateTime             @default(now())
  completedAt DateTime?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  assignments WorkflowAssignment[]
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflow    Workflow             @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspace   Workspace            @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("workflow_instances")
}

model WorkflowAssignment {
  id          String           @id @default(cuid())
  instanceId  String
  userId      String
  stepName    String
  status      AssignmentStatus @default(PENDING)
  data        Json?
  assignedAt  DateTime         @default(now())
  completedAt DateTime?
  instance    WorkflowInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("workflow_assignments")
}

model Integration {
  id          String          @id @default(cuid())
  workspaceId String
  type        IntegrationType
  name        String
  config      Json
  isActive    Boolean         @default(false)
  lastSyncAt  DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  workspace   Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("integrations")
}

model Migration {
  id             String          @id @default(cuid())
  workspaceId    String
  sourcePlatform String
  status         MigrationStatus @default(PENDING)
  progress       Json
  config         Json
  result         Json?
  startedAt      DateTime        @default(now())
  completedAt    DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  workspace      Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("migrations")
}

model ChatSession {
  id                String        @id @default(cuid())
  workspaceId       String
  userId            String
  title             String
  intent            String        @default("assist") // "doc_gen" | "assist" | "project_creation"
  target            String        @default("wiki_page") // "wiki_page" | "project"
  phase             String        @default("idle") // idle | intake | gathering_requirements | ready_to_draft | drafting | draft_ready | editing | publishing | published | ready_to_create | creating | project_created
  requirementNotes  Json?         // Store structured requirements
  draftTitle        String?
  draftBody         String?
  draftFormat       String        @default("markdown") // "markdown" | "html"
  pageSettings      Json?         // Store wiki page settings
  wikiUrl           String?
  projectUrl        String?       // Store project URL when project is created
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  messages          ChatMessage[]
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace         Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("chat_sessions")
}

model ChatMessage {
  id        String      @id @default(cuid())
  sessionId String
  type      MessageType
  content   String
  metadata  Json?
  createdAt DateTime    @default(now())
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Project {
  id          String          @id @default(cuid())
  workspaceId String
  name        String
  description String?
  status      ProjectStatus   @default(ACTIVE)
  priority    Priority        @default(MEDIUM)
  startDate   DateTime?
  endDate     DateTime?
  color       String?
  isArchived  Boolean         @default(false)
  
  // New fields for enhanced project management
  department  String?         // Department this project belongs to
  team        String?         // Team responsible for the project
  wikiPageId  String?         // Link to related wiki page
  ownerId     String?         // Project owner (main responsible person)
  
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdById String
  
  // Relations
  members     ProjectMember[]
  watchers    ProjectWatcher[] // Users who watch this project
  assignees   ProjectAssignee[] // Users assigned to work on this project
  createdBy   User            @relation(fields: [createdById], references: [id], onDelete: Cascade)
  owner       User?           @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: SetNull)
  workspace   Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  wikiPage    WikiPage?       @relation(fields: [wikiPageId], references: [id], onDelete: SetNull)
  tasks       Task[]

  @@map("projects")
}

model Task {
  id          String            @id @default(cuid())
  projectId   String
  workspaceId String
  title       String
  description String?
  status      ProjectTaskStatus @default(TODO)
  priority    Priority          @default(MEDIUM)
  assigneeId  String?
  dueDate     DateTime?
  completedAt DateTime?
  order       Int               @default(0)
  tags        String[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  createdById String
  subtasks    Subtask[]
  comments    TaskComment[]
  assignee    User?             @relation("TaskAssignee", fields: [assigneeId], references: [id])
  createdBy   User              @relation("TaskCreator", fields: [createdById], references: [id], onDelete: Cascade)
  project     Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  workspace   Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Subtask {
  id          String            @id @default(cuid())
  taskId      String
  title       String
  description String?
  status      ProjectTaskStatus @default(TODO)
  assigneeId  String?
  dueDate     DateTime?
  completedAt DateTime?
  order       Int               @default(0)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  assignee    User?             @relation(fields: [assigneeId], references: [id])
  task        Task              @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("subtasks")
}

model TaskComment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("task_comments")
}

model ProjectMember {
  id        String      @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model ProjectWatcher {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  addedAt   DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation("ProjectWatcher", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_watchers")
}

model ProjectAssignee {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      String?  // Optional role description for this assignment
  assignedAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation("ProjectAssignee", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_assignees")
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
}

enum OnboardingStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum WorkflowStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
}

enum AssignmentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
}

enum MigrationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum IntegrationType {
  SLACK
  GOOGLE_DRIVE
  MICROSOFT_TEAMS
  ZOOM
  SLITE
  CLICKUP
  NOTION
  CONFLUENCE
  ASANA
  TRELLO
  MONDAY
}

enum MessageType {
  USER
  AI
}

enum ProjectStatus {
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectTaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  BLOCKED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}
