generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== AUTHENTICATION & USERS =====

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  workspaceMemberships WorkspaceMember[]
  createdWorkspaces    Workspace[]
  wikiPages     WikiPage[]
  wikiComments  WikiComment[]
  onboardingPlans OnboardingPlan[]
  onboardingTasks OnboardingTask[]
  orgPositions  OrgPosition[]
  workflowInstances WorkflowInstance[]
  workflowAssignments WorkflowAssignment[]
  wikiVersions WikiVersion[]
  wikiPagePermissions WikiPagePermission[]
  chatSessions ChatSession[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ===== WORKSPACES & MULTI-TENANCY =====

model Workspace {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String

  owner       User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members     WorkspaceMember[]
  wikiPages   WikiPage[]
  onboardingTemplates OnboardingTemplate[]
  onboardingPlans OnboardingPlan[]
  orgPositions OrgPosition[]
  workflows   Workflow[]
  workflowInstances WorkflowInstance[]
  integrations Integration[]
  wikiChunks  WikiChunk[]
  chatSessions ChatSession[]

  @@map("workspaces")
}

model WorkspaceMember {
  id          String      @id @default(cuid())
  workspaceId String
  userId      String
  role        WorkspaceRole @default(MEMBER)
  joinedAt    DateTime    @default(now())

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@map("workspace_members")
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
}

// ===== WIKI MODULE =====

model WikiPage {
  id          String   @id @default(cuid())
  workspaceId String
  title       String
  slug        String
  content     String   @db.Text
  excerpt     String?
  parentId    String?
  order       Int      @default(0)
  isPublished Boolean  @default(true)
  tags        String[]
  category    String   @default("general") // general, engineering, sales, marketing, hr, product
  permissionLevel String @default("team") // public, team, private, restricted
  attachments WikiAttachment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String

  workspace   Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdBy   User           @relation(fields: [createdById], references: [id], onDelete: Cascade)
  parent      WikiPage?      @relation("WikiPageHierarchy", fields: [parentId], references: [id])
  children    WikiPage[]     @relation("WikiPageHierarchy")
  comments    WikiComment[]
  versions    WikiVersion[]
  chunks      WikiChunk[]
  permissions WikiPagePermission[]

  @@unique([workspaceId, slug])
  @@map("wiki_pages")
}

model WikiAttachment {
  id        String   @id @default(cuid())
  pageId    String
  fileName  String
  fileSize  Int
  fileType  String
  fileUrl   String
  createdAt DateTime @default(now())

  page WikiPage @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("wiki_attachments")
}

model WikiComment {
  id        String   @id @default(cuid())
  pageId    String
  userId    String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  page WikiPage @relation(fields: [pageId], references: [id], onDelete: Cascade)
  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wiki_comments")
}

model WikiVersion {
  id        String   @id @default(cuid())
  pageId    String
  content   String   @db.Text
  version   Int
  createdAt DateTime @default(now())
  createdById String

  page      WikiPage @relation(fields: [pageId], references: [id], onDelete: Cascade)
  createdBy User     @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@map("wiki_versions")
}

// ===== AI SEARCH & RAG =====

model WikiChunk {
  id        String   @id @default(cuid())
  pageId    String
  workspaceId String
  content   String   @db.Text
  metadata  Json?
  createdAt DateTime @default(now())

  page      WikiPage  @relation(fields: [pageId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("wiki_chunks")
}

model WikiPagePermission {
  id          String   @id @default(cuid())
  pageId      String
  userId      String?
  role        WorkspaceRole?
  permission  String   // view, edit, delete, manage_permissions
  granted     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  page WikiPage @relation(fields: [pageId], references: [id], onDelete: Cascade)
  user User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pageId, userId, permission])
  @@map("wiki_page_permissions")
}

// ===== CLARIO ONBOARDING MODULE =====

model OnboardingTemplate {
  id          String   @id @default(cuid())
  workspaceId String
  name        String
  description String?
  role        String?
  duration    Int      // days
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks     OnboardingTask[]
  plans     OnboardingPlan[]

  @@map("onboarding_templates")
}

model OnboardingTask {
  id         String   @id @default(cuid())
  templateId String
  title      String
  description String?
  order      Int
  isRequired Boolean  @default(true)
  estimatedMinutes Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  template OnboardingTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  assignments OnboardingTaskAssignment[]
  users User[]

  @@map("onboarding_tasks")
}

model OnboardingPlan {
  id         String   @id @default(cuid())
  workspaceId String
  templateId String?
  userId     String
  title      String
  status     OnboardingStatus @default(ACTIVE)
  startDate  DateTime
  endDate    DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  template  OnboardingTemplate? @relation(fields: [templateId], references: [id])
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks     OnboardingTaskAssignment[]

  @@map("onboarding_plans")
}

model OnboardingTaskAssignment {
  id         String   @id @default(cuid())
  planId     String
  taskId     String
  status     TaskStatus @default(PENDING)
  completedAt DateTime?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  plan OnboardingPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  task OnboardingTask @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([planId, taskId])
  @@map("onboarding_task_assignments")
}

enum OnboardingStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

// ===== ORG CHART MODULE =====

model OrgPosition {
  id          String   @id @default(cuid())
  workspaceId String
  userId      String?
  title       String
  department  String?
  level       Int      @default(1)
  parentId    String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  parent    OrgPosition? @relation("OrgHierarchy", fields: [parentId], references: [id])
  children  OrgPosition[] @relation("OrgHierarchy")

  @@map("org_positions")
}

// ===== BPM LITE MODULE =====

model Workflow {
  id          String   @id @default(cuid())
  workspaceId String
  name        String
  description String?
  definition  Json     // Workflow steps, transitions, etc.
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  instances WorkflowInstance[]

  @@map("workflows")
}

model WorkflowInstance {
  id         String           @id @default(cuid())
  workflowId String
  workspaceId String
  userId     String
  status     WorkflowStatus   @default(PENDING)
  data       Json?
  startedAt  DateTime         @default(now())
  completedAt DateTime?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workspace  Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignments WorkflowAssignment[]

  @@map("workflow_instances")
}

model WorkflowAssignment {
  id         String   @id @default(cuid())
  instanceId String
  userId     String
  stepName   String
  status     AssignmentStatus @default(PENDING)
  data       Json?
  assignedAt DateTime @default(now())
  completedAt DateTime?

  instance WorkflowInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("workflow_assignments")
}

enum WorkflowStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
}

enum AssignmentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
}

// ===== INTEGRATIONS MODULE =====

model Integration {
  id          String   @id @default(cuid())
  workspaceId String
  type        IntegrationType
  name        String
  config      Json
  isActive    Boolean  @default(false)
  lastSyncAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("integrations")
}

enum IntegrationType {
  SLACK
  GOOGLE_DRIVE
  MICROSOFT_TEAMS
  ZOOM
}

// ===== AI CHAT MODULE =====

model ChatSession {
  id          String   @id @default(cuid())
  workspaceId String
  userId      String
  title       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    ChatMessage[]

  @@map("chat_sessions")
}

model ChatMessage {
  id          String   @id @default(cuid())
  sessionId   String
  type        MessageType
  content     String   @db.Text
  metadata    Json?    // For document plans, sources, etc.
  createdAt   DateTime @default(now())

  session     ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

enum MessageType {
  USER
  AI
}